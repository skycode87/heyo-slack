{"ast":null,"code":"import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveProfile = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const profileId = true;\n  const method = profileId ? \"PUT\" : \"POST\";\n  const path = profileId ? `${apiRoutes.PROFILE.SAVE_DATA}/${profileId}` : `${apiRoutes.PROFILE.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getProfile = async (profileId = 0, {\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.PROFILE.GET_DATA}/${profileId}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst savePasswordProfile = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const profileId = true;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PROFILE.SAVE_PASSWORD}/${profileId}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { saveProfile, getProfile, savePasswordProfile };","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/profile/requests.js"],"names":["FetchJson","apiRoutes","saveProfile","props","onSuccess","onError","onFinally","profileId","method","path","PROFILE","SAVE_DATA","request","response","json","error","process","env","NODE_ENV","console","log","getProfile","GET_DATA","savePasswordProfile","SAVE_PASSWORD"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AAEA,MAAMC,WAAW,GAAG,OAAOC,KAAK,GAAG,EAAf,EAAmB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,IAAoC,EAAvD,KAA8D;AAChF,QAAMC,SAAS,GAAG,IAAlB;AACA,QAAMC,MAAM,GAAGD,SAAS,GAAG,KAAH,GAAW,MAAnC;AACA,QAAME,IAAI,GAAGF,SAAS,GAAI,GAAEN,SAAS,CAACS,OAAV,CAAkBC,SAAU,IAAGJ,SAAU,EAA/C,GAAoD,GAAEN,SAAS,CAACS,OAAV,CAAkBC,SAAU,EAAxG;;AAEA,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMZ,SAAS,CAACS,IAAD,EAAOD,MAAP,EAAeL,KAAf,CAA/B;AAEA,UAAMU,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAvB;AACAV,IAAAA,SAAS,CAACS,QAAD,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDV,IAAAA,OAAO;AACR,GAXD,SAWU;AACRC,IAAAA,SAAS;AACV;AACF,CAnBD;;AAqBA,MAAMe,UAAU,GAAG,OAAOd,SAAS,GAAG,CAAnB,EAAsB;AAAEH,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyB,EAA/C,KAAsD;AACvE,MAAI;AACF,UAAMO,OAAO,GAAG,MAAMZ,SAAS,CAAE,GAAEC,SAAS,CAACS,OAAV,CAAkBY,QAAS,IAAGf,SAAU,EAA5C,EAA+C,KAA/C,CAA/B;AAEA,UAAMM,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAvB;AACAV,IAAAA,SAAS,CAACS,QAAD,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDV,IAAAA,OAAO;AACR;AACF,CAbD;;AAeA,MAAMkB,mBAAmB,GAAG,OAAOpB,KAAK,GAAG,EAAf,EAAmB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,IAAoC,EAAvD,KAA8D;AACxF,QAAMC,SAAS,GAAG,IAAlB;AACA,QAAMC,MAAM,GAAG,KAAf;AACA,QAAMC,IAAI,GAAI,GAAER,SAAS,CAACS,OAAV,CAAkBc,aAAc,IAAGjB,SAAU,EAA7D;;AAEA,MAAI;AACF,UAAMK,OAAO,GAAG,MAAMZ,SAAS,CAACS,IAAD,EAAOD,MAAP,EAAeL,KAAf,CAA/B;AAEA,UAAMU,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAvB;AACAV,IAAAA,SAAS,CAACS,QAAD,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDV,IAAAA,OAAO;AACR,GAXD,SAWU;AACRC,IAAAA,SAAS;AACV;AACF,CAnBD;;AAqBA,SAASJ,WAAT,EAAsBmB,UAAtB,EAAkCE,mBAAlC","sourcesContent":["import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveProfile = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const profileId = true;\n  const method = profileId ? \"PUT\" : \"POST\";\n  const path = profileId ? `${apiRoutes.PROFILE.SAVE_DATA}/${profileId}` : `${apiRoutes.PROFILE.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getProfile = async (profileId = 0, { onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.PROFILE.GET_DATA}/${profileId}`, \"GET\");\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst savePasswordProfile = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const profileId = true;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PROFILE.SAVE_PASSWORD}/${profileId}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { saveProfile, getProfile, savePasswordProfile };\n"]},"metadata":{},"sourceType":"module"}