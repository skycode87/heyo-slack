{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { customFetch } from \"../../../helpers/fetch\";\n\nconst useFetch = (url, method = \"GET\", body) => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [refetchIndex, setRefetchIndex] = useState(0);\n\n  const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        const response = await customFetch(url, {\n          method,\n          body\n        });\n        const result = await response.json();\n\n        if (response.ok) {\n          if (result.rows) {\n            const rows = result === null || result === void 0 ? void 0 : result.rows.map((rowData, index) => ({ ...rowData,\n              rowPosition: index\n            }));\n            setData({ ...result,\n              rows\n            });\n          } else {\n            setData(result);\n          }\n        } else {\n          setHasError(true);\n          setData(result);\n        }\n      } catch (error) {\n        setHasError(true);\n        setErrorMessage(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [refetchIndex]);\n  return {\n    data,\n    loading,\n    hasError,\n    errorMessage,\n    refetch\n  };\n};\n\n_s(useFetch, \"rgw308p93jCVH2WucRyQqav0iBY=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/shared/hooks/useFetch.js"],"names":["useState","useEffect","customFetch","useFetch","url","method","body","data","setData","loading","setLoading","hasError","setHasError","errorMessage","setErrorMessage","refetchIndex","setRefetchIndex","refetch","prevRefetchIndex","fetchData","response","result","json","ok","rows","map","rowData","index","rowPosition","error"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,KAAf,EAAsBC,IAAtB,KAA+B;AAAA;;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,CAAD,CAAhD;;AAEA,QAAMiB,OAAO,GAAG,MAAMD,eAAe,CAAEE,gBAAD,IAAsBA,gBAAgB,GAAG,CAA1C,CAArC;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,SAAS,GAAG,YAAY;AAC5BT,MAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,UAAI;AACF,cAAMU,QAAQ,GAAG,MAAMlB,WAAW,CAACE,GAAD,EAAM;AAAEC,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAN,CAAlC;AACA,cAAMe,MAAM,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAArB;;AAEA,YAAIF,QAAQ,CAACG,EAAb,EAAiB;AACf,cAAIF,MAAM,CAACG,IAAX,EAAiB;AACf,kBAAMA,IAAI,GAAGH,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEG,IAAR,CAAaC,GAAb,CAAiB,CAACC,OAAD,EAAUC,KAAV,MAAqB,EACjD,GAAGD,OAD8C;AAEjDE,cAAAA,WAAW,EAAED;AAFoC,aAArB,CAAjB,CAAb;AAIAnB,YAAAA,OAAO,CAAC,EAAE,GAAGa,MAAL;AAAaG,cAAAA;AAAb,aAAD,CAAP;AACD,WAND,MAMO;AACLhB,YAAAA,OAAO,CAACa,MAAD,CAAP;AACD;AACF,SAVD,MAUO;AACLT,UAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,UAAAA,OAAO,CAACa,MAAD,CAAP;AACD;AACF,OAlBD,CAkBE,OAAOQ,KAAP,EAAc;AACdjB,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,eAAe,CAACe,KAAD,CAAf;AACD,OArBD,SAqBU;AACRnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KA3BD;;AA6BAS,IAAAA,SAAS;AACV,GA/BQ,EA+BN,CAACJ,YAAD,CA/BM,CAAT;AAiCA,SAAO;AACLR,IAAAA,IADK;AAELE,IAAAA,OAFK;AAGLE,IAAAA,QAHK;AAILE,IAAAA,YAJK;AAKLI,IAAAA;AALK,GAAP;AAOD,CAjDD;;GAAMd,Q;;AAmDN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { customFetch } from \"../../../helpers/fetch\";\n\nconst useFetch = (url, method = \"GET\", body) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [refetchIndex, setRefetchIndex] = useState(0);\n\n  const refetch = () => setRefetchIndex((prevRefetchIndex) => prevRefetchIndex + 1);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        const response = await customFetch(url, { method, body });\n        const result = await response.json();\n\n        if (response.ok) {\n          if (result.rows) {\n            const rows = result?.rows.map((rowData, index) => ({\n              ...rowData,\n              rowPosition: index,\n            }));\n            setData({ ...result, rows });\n          } else {\n            setData(result);\n          }\n        } else {\n          setHasError(true);\n          setData(result);\n        }\n      } catch (error) {\n        setHasError(true);\n        setErrorMessage(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [refetchIndex]);\n\n  return {\n    data,\n    loading,\n    hasError,\n    errorMessage,\n    refetch,\n  };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}