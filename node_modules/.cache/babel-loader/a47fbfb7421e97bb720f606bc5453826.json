{"ast":null,"code":"import { FetchJson, FetchJsonMultipart } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveBucket = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    bucketId\n  } = props;\n  const method = bucketId ? \"PUT\" : \"POST\";\n  const path = bucketId ? `${apiRoutes.BUCKET.SAVE_DATA}/${bucketId}` : `${apiRoutes.BUCKET.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJsonMultipart(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst updateBucket = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    bucketId\n  } = props;\n  const method = \"PUT\";\n  const path = `${apiRoutes.BUCKET.SAVE_DATA}/${bucketId}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst saveImageBucket = async (info, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  if (info.file.status !== \"uploading\") {\n    console.log(info.file, info.fileList);\n  }\n\n  if (info.file.status === \"done\") {\n    onSuccess(info.file);\n  } else if (info.file.status === \"error\") {\n    onError();\n  }\n\n  onFinally();\n};\n\nconst getBucket = async (bucketId = 0, {\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.BUCKET.GET_DATA}/${bucketId}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst archivedBucket = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id\n  } = params.bucket;\n  const method = \"PUT\";\n  const path = `${apiRoutes.BUCKET.ARCHIVED}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      archived: true\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst activeBucket = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id\n  } = params.bucket;\n  const method = \"PUT\";\n  const path = `${apiRoutes.BUCKET.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      active: \"\"\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { getBucket, saveBucket, archivedBucket, activeBucket, saveImageBucket, updateBucket };","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/bucket/requests.js"],"names":["FetchJson","FetchJsonMultipart","apiRoutes","saveBucket","props","onSuccess","onError","onFinally","bucketId","method","path","BUCKET","SAVE_DATA","request","response","json","error","process","env","NODE_ENV","console","log","updateBucket","saveImageBucket","info","file","status","fileList","getBucket","GET_DATA","archivedBucket","params","_id","bucket","ARCHIVED","archived","activeBucket","ACTIVE","active"],"mappings":"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","sourcesContent":["import { FetchJson, FetchJsonMultipart } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveBucket = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { bucketId } = props;\n  const method = bucketId ? \"PUT\" : \"POST\";\n  const path = bucketId ? `${apiRoutes.BUCKET.SAVE_DATA}/${bucketId}` : `${apiRoutes.BUCKET.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJsonMultipart(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst updateBucket = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { bucketId } = props;\n  const method = \"PUT\";\n  const path = `${apiRoutes.BUCKET.SAVE_DATA}/${bucketId}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst saveImageBucket = async (info, { onSuccess, onError, onFinally } = {}) => {\n  if (info.file.status !== \"uploading\") {\n    console.log(info.file, info.fileList);\n  }\n  if (info.file.status === \"done\") {\n    onSuccess(info.file);\n  } else if (info.file.status === \"error\") {\n    onError();\n  }\n  onFinally();\n};\n\nconst getBucket = async (bucketId = 0, { onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.BUCKET.GET_DATA}/${bucketId}`, \"GET\");\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst archivedBucket = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id } = params.bucket;\n  const method = \"PUT\";\n  const path = `${apiRoutes.BUCKET.ARCHIVED}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { archived: true });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst activeBucket = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id } = params.bucket;\n  const method = \"PUT\";\n  const path = `${apiRoutes.BUCKET.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { active: \"\" });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { getBucket, saveBucket, archivedBucket, activeBucket, saveImageBucket, updateBucket };\n"]},"metadata":{},"sourceType":"module"}