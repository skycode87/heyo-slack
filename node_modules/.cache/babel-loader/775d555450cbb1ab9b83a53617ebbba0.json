{"ast":null,"code":"import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst savePlan = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    planId\n  } = props;\n  const method = planId ? \"PUT\" : \"POST\";\n  const path = planId ? `${apiRoutes.PLANS.SAVE_DATA}/${planId}` : `${apiRoutes.PLANS.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst savePlanContent = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    planId\n  } = props;\n  const method = planId ? \"PUT\" : \"POST\";\n  const path = planId ? `${apiRoutes.PLANS.SAVE_DATA_CONTENT}/${planId}` : `${apiRoutes.PACKS.SAVE_DATA_CONTENT}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getPlan = async (planId = 0, {\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.PLANS.GET_DATA}/${planId}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst archivedPlan = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id\n  } = params.plan;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PLANS.ARCHIVED}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      archived: true\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst activePlan = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id,\n    active\n  } = params.plan;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PLANS.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      active: !active\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getPlans = async ({\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.PLANS.ALL}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nexport { getPlan, savePlanContent, savePlan, archivedPlan, activePlan, getPlans };","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/plans/requests.js"],"names":["FetchJson","apiRoutes","savePlan","props","onSuccess","onError","onFinally","planId","method","path","PLANS","SAVE_DATA","request","response","json","error","process","env","NODE_ENV","console","log","savePlanContent","SAVE_DATA_CONTENT","PACKS","getPlan","GET_DATA","archivedPlan","params","_id","plan","ARCHIVED","archived","activePlan","active","ACTIVE","getPlans","ALL"],"mappings":"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","sourcesContent":["import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst savePlan = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { planId } = props;\n  const method = planId ? \"PUT\" : \"POST\";\n  const path = planId ? `${apiRoutes.PLANS.SAVE_DATA}/${planId}` : `${apiRoutes.PLANS.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst savePlanContent = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { planId } = props;\n  const method = planId ? \"PUT\" : \"POST\";\n  const path = planId ? `${apiRoutes.PLANS.SAVE_DATA_CONTENT}/${planId}` : `${apiRoutes.PACKS.SAVE_DATA_CONTENT}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getPlan = async (planId = 0, { onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.PLANS.GET_DATA}/${planId}`, \"GET\");\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst archivedPlan = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id } = params.plan;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PLANS.ARCHIVED}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { archived: true });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst activePlan = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id, active } = params.plan;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PLANS.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { active: !active });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getPlans = async ({ onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.PLANS.ALL}`, \"GET\");\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\nexport { getPlan, savePlanContent, savePlan, archivedPlan, activePlan, getPlans };\n"]},"metadata":{},"sourceType":"module"}