{"ast":null,"code":"import { customFetch, FetchJsonWithouToken } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\nimport { loadingMode } from \"../shared/components/Loading/constants\";\nimport global from \"../../state/global\";\n\nconst login = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinish,\n  onFail\n} = {}) => {\n  try {\n    // global.loader.showLoading(loadingMode.FAST);\n    localStorage.removeItem(\"instanceId\");\n    const response = await customFetch(apiRoutes.LOGIN.ROOT, {\n      method: \"POST\",\n      body: new URLSearchParams({ ...params\n      })\n    });\n    const result = await response.json();\n\n    if (response.status === 400) {\n      onFail(result);\n    } else if (response.status === 200) {\n      onSuccess(result);\n\n      if (result.user) {\n        localStorage.setItem(\"instanceId\", result.user.instanceId);\n      }\n    }\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    // global.loader.hideLoading();\n    onFinish();\n  }\n};\n\nconst loadBranding = async (alias = \"\", {\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJsonWithouToken(`${apiRoutes.INSTANCE.BY_ALIAS}/${alias}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    } // onError();\n\n  }\n};\n\nexport { login, loadBranding };","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/login/request.js"],"names":["customFetch","FetchJsonWithouToken","apiRoutes","loadingMode","global","login","params","onSuccess","onError","onFinish","onFail","localStorage","removeItem","response","LOGIN","ROOT","method","body","URLSearchParams","result","json","status","user","setItem","instanceId","error","process","env","NODE_ENV","console","log","loadBranding","alias","request","INSTANCE","BY_ALIAS"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,oBAAtB,QAAkD,qBAAlD;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,WAAT,QAA4B,wCAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,OAAOC,MAAM,GAAG,EAAhB,EAAoB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA;AAAhC,IAA2C,EAA/D,KAAsE;AAClF,MAAI;AACF;AACAC,IAAAA,YAAY,CAACC,UAAb,CAAwB,YAAxB;AACA,UAAMC,QAAQ,GAAG,MAAMb,WAAW,CAACE,SAAS,CAACY,KAAV,CAAgBC,IAAjB,EAAuB;AACvDC,MAAAA,MAAM,EAAE,MAD+C;AAEvDC,MAAAA,IAAI,EAAE,IAAIC,eAAJ,CAAoB,EAAE,GAAGZ;AAAL,OAApB;AAFiD,KAAvB,CAAlC;AAKA,UAAMa,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAArB;;AAEA,QAAIP,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3BX,MAAAA,MAAM,CAACS,MAAD,CAAN;AACD,KAFD,MAEO,IAAIN,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAClCd,MAAAA,SAAS,CAACY,MAAD,CAAT;;AACA,UAAIA,MAAM,CAACG,IAAX,EAAiB;AACfX,QAAAA,YAAY,CAACY,OAAb,CAAqB,YAArB,EAAmCJ,MAAM,CAACG,IAAP,CAAYE,UAA/C;AACD;AACF;AACF,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDjB,IAAAA,OAAO;AACR,GAxBD,SAwBU;AACR;AACAC,IAAAA,QAAQ;AACT;AACF,CA7BD;;AA+BA,MAAMsB,YAAY,GAAG,OAAOC,KAAK,GAAG,EAAf,EAAmB;AAAEzB,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyB,EAA5C,KAAmD;AACtE,MAAI;AACF,UAAMyB,OAAO,GAAG,MAAMhC,oBAAoB,CAAE,GAAEC,SAAS,CAACgC,QAAV,CAAmBC,QAAS,IAAGH,KAAM,EAAzC,EAA4C,KAA5C,CAA1C;AACA,UAAMnB,QAAQ,GAAG,MAAMoB,OAAO,CAACb,IAAR,EAAvB;AACAb,IAAAA,SAAS,CAACM,QAAD,CAAT;AACD,GAJD,CAIE,OAAOY,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD,KAHa,CAKd;;AACD;AACF,CAZD;;AAcA,SAASpB,KAAT,EAAgB0B,YAAhB","sourcesContent":["import { customFetch, FetchJsonWithouToken } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\nimport { loadingMode } from \"../shared/components/Loading/constants\";\nimport global from \"../../state/global\";\n\nconst login = async (params = {}, { onSuccess, onError, onFinish, onFail } = {}) => {\n  try {\n    // global.loader.showLoading(loadingMode.FAST);\n    localStorage.removeItem(\"instanceId\");\n    const response = await customFetch(apiRoutes.LOGIN.ROOT, {\n      method: \"POST\",\n      body: new URLSearchParams({ ...params }),\n    });\n\n    const result = await response.json();\n\n    if (response.status === 400) {\n      onFail(result);\n    } else if (response.status === 200) {\n      onSuccess(result);\n      if (result.user) {\n        localStorage.setItem(\"instanceId\", result.user.instanceId);\n      }\n    }\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    // global.loader.hideLoading();\n    onFinish();\n  }\n};\n\nconst loadBranding = async (alias = \"\", { onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJsonWithouToken(`${apiRoutes.INSTANCE.BY_ALIAS}/${alias}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    // onError();\n  }\n};\n\nexport { login, loadBranding };\n"]},"metadata":{},"sourceType":"module"}