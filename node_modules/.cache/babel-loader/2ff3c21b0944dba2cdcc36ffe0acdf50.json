{"ast":null,"code":"import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveTrans = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    transId\n  } = props;\n  const method = transId ? \"PUT\" : \"POST\";\n  const path = transId ? `${apiRoutes.TRANS.SAVE_DATA}/${transId}` : `${apiRoutes.TRANS.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getTrans = async (planId = 0, {\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.TRANS.GET_DATA}/${planId}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst archivedTrans = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id\n  } = params.trans;\n  const method = \"PUT\";\n  const path = `${apiRoutes.TRANS.ARCHIVED}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      archived: true\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst activeTrans = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id\n  } = params.trans;\n  const method = \"PUT\";\n  const path = `${apiRoutes.TRANS.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      active: \"\"\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { getTrans, saveTrans, archivedTrans, activeTrans };","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/trans/requests.js"],"names":["FetchJson","apiRoutes","saveTrans","props","onSuccess","onError","onFinally","transId","method","path","TRANS","SAVE_DATA","request","response","json","error","process","env","NODE_ENV","console","log","getTrans","planId","GET_DATA","archivedTrans","params","_id","trans","ARCHIVED","archived","activeTrans","ACTIVE","active"],"mappings":"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","sourcesContent":["import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveTrans = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { transId } = props;\n  const method = transId ? \"PUT\" : \"POST\";\n  const path = transId ? `${apiRoutes.TRANS.SAVE_DATA}/${transId}` : `${apiRoutes.TRANS.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getTrans = async (planId = 0, { onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.TRANS.GET_DATA}/${planId}`, \"GET\");\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst archivedTrans = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id } = params.trans;\n  const method = \"PUT\";\n  const path = `${apiRoutes.TRANS.ARCHIVED}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { archived: true });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst activeTrans = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id } = params.trans;\n  const method = \"PUT\";\n  const path = `${apiRoutes.TRANS.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { active: \"\" });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { getTrans, saveTrans, archivedTrans, activeTrans };\n"]},"metadata":{},"sourceType":"module"}