{"ast":null,"code":"import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveInstance = async (props = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const instanceId = true;\n  const method = instanceId ? \"PUT\" : \"POST\";\n  const path = instanceId ? `${apiRoutes.INSTANCE.SAVE_DATA}/${instanceId}` : `${apiRoutes.INSTANCE.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getInstance = async (instanceId = 0, {\n  onSuccess,\n  onError\n} = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.INSTANCE.GET_DATA}/${instanceId}`, \"GET\");\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst activePlan = async (params = {}, {\n  onSuccess,\n  onError,\n  onFinally\n} = {}) => {\n  const {\n    _id,\n    active\n  } = params.plan;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PLANS.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, {\n      active: !active\n    });\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { saveInstance, activePlan, getInstance };","map":{"version":3,"sources":["/Users/kometsales/Documents/heyo-slack/src/features/instance/requests.js"],"names":["FetchJson","apiRoutes","saveInstance","props","onSuccess","onError","onFinally","instanceId","method","path","INSTANCE","SAVE_DATA","request","response","json","error","process","env","NODE_ENV","console","log","getInstance","GET_DATA","activePlan","params","_id","active","plan","PLANS","ACTIVE"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AAEA,MAAMC,YAAY,GAAG,OAAOC,KAAK,GAAG,EAAf,EAAmB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,IAAoC,EAAvD,KAA8D;AACjF,QAAMC,UAAU,GAAG,IAAnB;AACA,QAAMC,MAAM,GAAGD,UAAU,GAAG,KAAH,GAAW,MAApC;AACA,QAAME,IAAI,GAAGF,UAAU,GAAI,GAAEN,SAAS,CAACS,QAAV,CAAmBC,SAAU,IAAGJ,UAAW,EAAjD,GAAsD,GAAEN,SAAS,CAACS,QAAV,CAAmBC,SAAU,EAA5G;;AAEA,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMZ,SAAS,CAACS,IAAD,EAAOD,MAAP,EAAeL,KAAf,CAA/B;AAEA,UAAMU,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAvB;AACAV,IAAAA,SAAS,CAACS,QAAD,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDV,IAAAA,OAAO;AACR,GAXD,SAWU;AACRC,IAAAA,SAAS;AACV;AACF,CAnBD;;AAqBA,MAAMe,WAAW,GAAG,OAAOd,UAAU,GAAG,CAApB,EAAuB;AAAEH,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyB,EAAhD,KAAuD;AACzE,MAAI;AACF,UAAMO,OAAO,GAAG,MAAMZ,SAAS,CAAE,GAAEC,SAAS,CAACS,QAAV,CAAmBY,QAAS,IAAGf,UAAW,EAA9C,EAAiD,KAAjD,CAA/B;AAEA,UAAMM,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAvB;AACAV,IAAAA,SAAS,CAACS,QAAD,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDV,IAAAA,OAAO;AACR;AACF,CAbD;;AAeA,MAAMkB,UAAU,GAAG,OAAOC,MAAM,GAAG,EAAhB,EAAoB;AAAEpB,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,IAAoC,EAAxD,KAA+D;AAChF,QAAM;AAAEmB,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAkBF,MAAM,CAACG,IAA/B;AACA,QAAMnB,MAAM,GAAG,KAAf;AACA,QAAMC,IAAI,GAAI,GAAER,SAAS,CAAC2B,KAAV,CAAgBC,MAAO,IAAGJ,GAAI,EAA9C;;AAEA,MAAI;AACF,UAAMb,OAAO,GAAG,MAAMZ,SAAS,CAACS,IAAD,EAAOD,MAAP,EAAe;AAAEkB,MAAAA,MAAM,EAAE,CAACA;AAAX,KAAf,CAA/B;AAEA,UAAMb,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAvB;AACAV,IAAAA,SAAS,CAACS,QAAD,CAAT;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAEDV,IAAAA,OAAO;AACR,GAXD,SAWU;AACRC,IAAAA,SAAS;AACV;AACF,CAnBD;;AAqBA,SAASJ,YAAT,EAAuBqB,UAAvB,EAAmCF,WAAnC","sourcesContent":["import { FetchJson } from \"../../helpers/fetch\";\nimport { apiRoutes } from \"../../constants/routes\";\n\nconst saveInstance = async (props = {}, { onSuccess, onError, onFinally } = {}) => {\n  const instanceId = true;\n  const method = instanceId ? \"PUT\" : \"POST\";\n  const path = instanceId ? `${apiRoutes.INSTANCE.SAVE_DATA}/${instanceId}` : `${apiRoutes.INSTANCE.SAVE_DATA}`;\n\n  try {\n    const request = await FetchJson(path, method, props);\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nconst getInstance = async (instanceId = 0, { onSuccess, onError } = {}) => {\n  try {\n    const request = await FetchJson(`${apiRoutes.INSTANCE.GET_DATA}/${instanceId}`, \"GET\");\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  }\n};\n\nconst activePlan = async (params = {}, { onSuccess, onError, onFinally } = {}) => {\n  const { _id, active } = params.plan;\n  const method = \"PUT\";\n  const path = `${apiRoutes.PLANS.ACTIVE}/${_id}`;\n\n  try {\n    const request = await FetchJson(path, method, { active: !active });\n\n    const response = await request.json();\n    onSuccess(response);\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(error);\n    }\n\n    onError();\n  } finally {\n    onFinally();\n  }\n};\n\nexport { saveInstance, activePlan, getInstance };\n"]},"metadata":{},"sourceType":"module"}